#!/usr/bin/env ruby

require 'gli'
require 'yaml'
require 'colorize'

begin
  require 'gatorate'
rescue LoadError
  puts "Using local source".yellow
  require 'bundler'
  Bundler.setup
  require_relative '../lib/gatorate'
end

include GLI::App

program_desc 'Is the door open?'
version Gatorate::VERSION

desc 'Observe door lock via GPIO-pins'
command :observe do |c|
  c.desc 'config file'
  c.default_value '/etc/gatorate.yml'
  c.flag [:c, :config]

  c.action do |global_options, options, ar|
    default_config = {
      "node"  => "door",
      "ip"    => Gatorate::IP.find || '127.0.0.1',
      "port"  => 7777
    }
    config = YAML.load_file(options[:config]) rescue default_config
    Gatorate::Observer.new(config)
  end
end


desc 'Access the door via irb console'
command :console do |c|
  c.desc 'node name'
  c.default_value 'console'
  c.flag [:n, :node]

  c.desc 'door node ip'
  c.default_value Gatorate::IP.find || '127.0.0.1'
  c.flag [:i, :ip]

  c.desc 'door noe port'
  c.default_value '7778'
  c.flag [:p, :port]

  c.action do |global_options, options, args|
    Gatorate::Console.new(options[:node], options[:ip], options[:port])
  end
end

desc 'Run the webserver'
command :web do |c|
  c.desc 'node name'
  c.default_value 'web'
  c.flag [:n, :node]

  c.desc 'daemonize server'
  c.switch [:d, :daemonize]

  c.desc 'door node ip'
  c.default_value Gatorate::IP.find || '127.0.0.1'
  c.flag [:i, :ip]

  c.desc 'door node port'
  c.default_value '7779'
  c.flag [:p, :port]

  c.desc 'web port'
  c.default_value '9292'
  c.flag [:P, :Port]


  c.action do |global_options, options, args|
    require 'thin'

    DCell.start :addr => "tcp://#{options[:ip]}:#{options[:port]}", :id => "#{options[:node]}"

    server = Thin::Server.new(options[:ip], options[:Port], Web)
    server.log_file = '/var/log/gatorate.log'
    server.pid_file = '/tmp/gatorate.pid'
    server.daemonize if options[:daemonize]
    server.start
  end
end

exit run(ARGV)
